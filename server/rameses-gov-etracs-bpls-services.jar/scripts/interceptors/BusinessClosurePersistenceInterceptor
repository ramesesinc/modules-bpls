import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.text.*;
import bpls.facts.*;

public class BusinessClosurePersistenceInterceptor {

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@Service("DateService")
	def dateSvc;

	@DataContext("vw_business_application")
	def appEm;

	@DataContext("business_account")
	def acctEm;	

	@Env
	def env;

	//before generating the closure certificate ensure to select the current business account
	@Before(pattern="PersistenceService.create", eval="#{ args[0]._schemaname == 'business_closure' }")
	public void beforeCreateClosure(def evt) {
		def closure = evt.args[0];

		def dt = dateSvc.getServerDate();

		if( !closure.appid ) throw new Exception("Please add an appid in closure");

		def app = appEm.find( [objid: closure.appid ]).first(); 
		if( !app.apptype.matches("RETIRE"))
			throw new Exception("App Type must be type RETIRE");
		closure.dtissued = dt;
		closure.businessyearid = app.businessyearid;
		closure.geninfoid = app.geninfoid;
		closure.businessacctid = app.businessacctid;
		closure.controlno = controlNoSvc.getNextNo( "BC[org][yyyy][%06d]" );
	} 

	@After(pattern="PersistenceService.create", index=50, eval="#{args[0]._schemaname == 'business_closure' }")
	public void afterCreateClosure(def evt) {
		def closure = evt.result;
		acctEm.find( [objid: closure.businessacctid ] ).update( [closureid: closure.objid ] );
	} 



}