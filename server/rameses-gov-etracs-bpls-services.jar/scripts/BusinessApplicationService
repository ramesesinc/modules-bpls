import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import java.text.*;

/*************************************************
* This creates a new business application for 
* NEW, RENEW, RETIRE, ADDITIONAL, RETIRELOB, OTHERS
*************************************************/
public class BusinessApplicationService  {
	
	@DataContext("business_generalinfo")
	def genInfoEm;

	@DataContext("business_application")
	def appEm;

	@DataContext("business_account")
	def acctEm;

	@DataContext("business_year")
	def businessYearEm;

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def taskSvc;

	@DataContext("vw_business_account")
	def vwAcctEm;

	@DataContext("vw_business_account_lob")
	def vwAcctLobEm;

	def generateAppNo = { bin, apptype ->
		def suff = "";
		if( apptype == 'NEW') suff = "N";
		else if( apptype == 'RENEW') suff = "R";
		else if( apptype == 'ADDITIONAL') suff = "A";
		else if( apptype == 'RETIRE') suff = "X";		
		return bin + suff;	
	}

	def createInfo = { o, acctid->
		def m = [:];
		m.businessacctid= acctid;
		m.orgtype=o.orgtype;
		m.tradename=o.tradename;
		m.owner=o.owner;
		m.address=o.address;
		m.lessor=o.lessor;
		m.rentedaddressid=o.rentedaddressid	;
		m.ownedaddressid=o.ownedaddressid	;
		m.mobileno=o.mobileno;
		m.phoneno=o.phoneno;
		m.email=o.email;
		m.dtcreated = o.dtcreated;
		m = genInfoEm.create(m);
		return m;		
	}

	def createYearEntry = { o, acctid, infoid ->
		def m = [:];
		m.year = o.appyear;
		m.geninfoid = infoid;
		m.businessacctid = acctid;
		m.permitid = null;
		m = businessYearEm.create(m);
		return m;		
	}

	def createNewOrCapture( def app ) {
		if( !app.lobs ) throw new Exception("Please specify lobs in application");
		if( !app.appyear ) throw new Exception("Please specify appyear in application");		
		def acct = [:];
		acct.bin = controlNoSvc.getNextNo( "B[org][yyyy][%06d]" );
		acct.businessname = app.businessname;
		acct.dtcreated = dateSvc.getServerDate(); 
		acct = acctEm.create( acct );
		

		//set application properties
		def geninfo = createInfo( app, acct.objid );	
		def yearentry = createYearEntry( app, acct.objid, geninfo.objid );
		
		app.businessacctid = acct.objid;		
		app.geninfoid = geninfo.objid;
		app.businessyearid = yearentry.objid;
		app.dtcreated = acct.dtcreated;
		app.appdate = acct.dtcreated;
		app.bin = acct.bin;
		app.appno =  generateAppNo(app.bin, app.apptype);
		appEm.create(app);

	}

	def createRenew( def app ) {
		if( !app.businessacctid ) throw new Exception("Please specify business in renewal application");
		if( !app.lobs ) throw new Exception("Please specify lobs in renewal application");
		def dtfiled = dateSvc.getServerDate(); 
		def acct = vwAcctEm.find([objid:app.businessacctid]).first();
		if( (acct.year + 1) != app.appyear )
			throw new Exception("Year must be an increment from last year renewed/registered");
		if( acct.renewaldate !=null && acct.renewaldate.after( dtfiled ) )
			throw new Exception("This is not yet scheduled for renewal. Please check renewaldate");	
		def yearentry = createYearEntry( app, acct.objid, acct.geninfoid );
		app.appno = generateAppNo(acct.bin, app.apptype);		
		app.geninfoid = acct.geninfoid;
		app.businessyearid = yearentry.objid;
		app.appdate = app.txndate;
 		appEm.create(app);

		def renewalDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(app.appyear+"-01-01");
		def businessacctid = app.businessacctid;
		acctEm.find([objid: businessacctid ] ).update( [currentyearid: app.businessyearid ]);
		businessYearEm.find( [objid: app.businessyearid ] ).update( [appid: app.objid, renewaldate: renewalDate] );
	}

	def createAmend( def app ) {
		if( app.apptype.matches('RETIRE|RETIRELOB')) {
			if(!app.retiredlobs) throw new Exception("There are no lines of business to retire")
		}
		if( !app.businessacctid ) throw new Exception("Please specify businessacctid in application");
		def acct = vwAcctEm.find([objid:app.businessacctid]).first();
		app.appno = generateAppNo(acct.bin, app.apptype);
		app.geninfoid = acct.geninfoid;
		app.businessyearid = acct.currentyearid;		
		app.appdate = app.txndate;	
		appEm.create(app);
		def renewalDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(app.appyear+"-01-01");
		def businessacctid = app.businessacctid;
		acctEm.find([objid: businessacctid ] ).update( [currentyearid: app.businessyearid ]);
		businessYearEm.find( [objid: app.businessyearid ] ).update( [appid: app.objid, renewaldate: renewalDate] );		
	}

	@ProxyMethod
	public def create( def app ) {
		def dt = dateSvc.getServerDate();
		app.txndate = dt;

		//correct the data
		if( app.infos ) {
			app.infos.each { it.type = 'appinfo' };
		}
		if( app.lobs ) {
			app.lobs.findAll{ it.lob != null }.each { it.lobid = it.lob.objid };
		}

		if(app.apptype == 'NEW' || app.txnmode == 'CAPTURE') {
			createNewOrCapture( app );
		}
		else if( app.apptype == 'RENEW') {
			createRenew( app );
		}
		else {
			createAmend( app );
		}

		//fire the workflow
		if( app.txnmode == 'ONLINE' ) {
			def p = [:];
			p.processname = 'business_application';
			p.refid = app.objid;
			p.startdate = dt;
			p.info = app;
			taskSvc.start(p);
		}
	}

}
