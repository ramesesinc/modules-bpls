import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;

public class BusinessInfoService  {
	
	@Service("BasicRuleService")
	def basicRuleSvc;

	@DataContext("business_application_info")
	def infoEm;

	@ProxyMethod
	public def getAppInfos(o) {
		def res = basicRuleSvc.execute( [rulename:'bpinfo', params:o ] );
		if(res.askinfos) return res;

		def infos = [];
		infos.addAll( o.infos );
		if(res.infos) infos.addAll( res.infos );

		if( o.save_infos == true ) {
			//remove existing then add the new
			infoEm.find([appid: o.appid]).delete();
			infos.each {
				it.appid = o.appid;
				it.lobid = it.lob?.objid;
				it.objid = it.appid + (it.lobid?'-'+it.lobid:'') + '-' + it.name;				
				if(it.datatype == 'decimal') it.decimalvalue = it.value;
				else if(it.datatype == 'integer') it.intvalue = it.value;
				else if(it.datatype == 'date') it.datevalue = it.value;
				else if(it.datatype == 'boolean') it.booleanvalue = it.value;
				else it.stringvalue = it.value;
				it.type = "appinfo";
				infoEm.create(it)
			}
		}
		def app = [:];
		app.infos = res.infos;
		return app;
	}	

	@ProxyMethod
	public def getRequirements( o ) {
		//run requirements
		def res = basicRuleSvc.execute( [rulename:'bprequirement', params:o ] );
		def app = [:];
		app.requirements = res.requirements;
		return app;
	}

}

