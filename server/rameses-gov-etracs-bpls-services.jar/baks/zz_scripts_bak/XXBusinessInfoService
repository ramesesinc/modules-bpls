
	/*
	@ProxyMethod
	public def getAssessmentInfos(o) {
		def infos = em.getAssessmentInfos( o );
		infos.each {
			it.value = formatInfo(it);
		}
		return infos;
	}
	*/	
	
	/*
	@ProxyMethod
	public void addAppInfos(def o) {
		if(!o.businessid) throw new Exception("businessid is required");
		if(!o.appinfos) throw new Exception("appinfos is required");
		if(!o.applicationid) throw new Exception("applicationid is required");
		if(!o.activeyear) throw new Exception("activeyear is required");
		em.removeAppInfos( o );
		o.appinfos.each {
			it.objid = "BUSINFO"+new UID();
			it.businessid = o.businessid;
			it.applicationid = o.applicationid;
			it.activeyear = o.activeyear;
			it.type = "appinfo";
			convertInfo(it);
			em.create(it);
		}	
	}

	@ProxyMethod
	public void addAssessmentInfos(def o) {
		if(!o.businessid) throw new Exception("businessid is required");
		if(!o.assessmentinfos) throw new Exception("assessmentinfos is required");
		if(!o.applicationid) throw new Exception("applicationid is required");
		if(!o.activeyear) throw new Exception("activeyear is required");
		em.removeAssessmentInfos( o );
		o.assessmentinfos.each {
			it.objid = "ASSBUSINFO"+new UID();
			it.businessid = o.businessid;
			it.applicationid = o.applicationid;
			it.activeyear = o.activeyear;
			it.type = "assessmentinfo";
			convertInfo(it);
			em.create(it);
		}	
	}

	@ProxyMethod
	public void removeAppInfos(def o) {
		if(!o.applicationid) throw new Exception("applicationid is required");
		em.removeAppInfos( [applicationid: o.applicationid ] );
	}

	@ProxyMethod
	public void removeAssessmentInfos(def o) {
		if(!o.applicationid) throw new Exception("applicationid is required");
		em.removeAssessmentInfos( [applicationid: o.applicationid ] );
	}
	*/
	/********************
	* ACTIVE INFOS
	********************/
	/*
	@ProxyMethod
	public def getActiveAppInfos(o) {
		def infos = activeInfo.getAppInfos( o );
		infos.each {
			it.value = formatInfo(it);
		}
		return infos;
	}	

	
	@ProxyMethod
	public void addActiveAppInfos(o) {
		if(!o.businessid) throw new Exception("businessid is required");
		if(!o.appinfos) throw new Exception("appinfos is required");
		if(o.remove_all == true) activeInfo.removeAppInfos( o );
		o.appinfos.each {
			it.businessid = o.businessid;
			it.type = 'appinfo';
			convertInfo(it);
			activeInfo.create( it );
		}
		activeInfo.cleanupInfos( o );
	}	

	@ProxyMethod
	public def getActiveAssessmentInfos(o) {
		def infos = activeInfo.getAssessmentInfos( o );
		infos.each {
			it.value = formatInfo(it);
		}
		return infos;
	}	

	@ProxyMethod
	public void addActiveAssessmentInfos(o) {
		if(!o.businessid) throw new Exception("businessid is required");
		if(!o.assessmentinfos) throw new Exception("assessmentinfos is required");
		if(o.remove_all == true) activeInfo.removeAssessmentInfos( o );
		o.assessmentinfos.each {
			it.businessid = o.businessid;
			it.type = 'assessmentinfo';
			convertInfo(it);
			activeInfo.create( it );
		}
		activeInfo.cleanupInfos( o );
	} 
	*/