import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import java.text.*;
import bpls.facts.*;

/*****************************************************************************
* APPLICATION TYPES:
* NEW, RENEW, RETIRE, ADDITIONAL, CHANGE INFO
******************************************************************************/
public class BusinessApplicationPersistenceInterceptor {

	@DataContext("business_generalinfo")
	def genInfoEm;

	@DataContext("business_account")
	def acctEm;

	@DataContext("business_year")
	def businessYearEm;

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def taskSvc;

	@DataContext("vw_business_account")
	def vwAcctEm;

	@DataContext("vw_business_account_lob")
	def vwAcctLobEm;

	def createInfo = { o->
		def m = [:];
		m.businessacctid=o.businessacctid;
		m.orgtype=o.orgtype;
		m.tradename=o.tradename;
		m.owner=o.owner;
		m.address=o.address;
		m.lessor=o.lessor;
		m.rentedaddressid=o.rentedaddressid	;
		m.ownedaddressid=o.ownedaddressid	;
		m.mobileno=o.mobileno;
		m.phoneno=o.phoneno;
		m.email=o.email;
		m.dtcreated = o.dtcreated;
		m = genInfoEm.create(m);
		return m;		
	}

	def generateAppNo = { bin, apptype ->
		def suff = "";
		if( apptype == 'NEW') suff = "N";
		else if( apptype == 'RENEW') suff = "R";
		else if( apptype == 'ADDITIONAL') suff = "A";
		else if( apptype == 'RETIRE') suff = "X";		
		return bin + suff;	
	}

	def createYearEntry = { o, geninfo ->
		def m = [:];
		m.year = o.appyear;
		m.geninfoid = geninfo.objid;
		m.businessacctid = o.businessacctid;
		m.permitid = null;
		m = businessYearEm.create(m);
		return m;		
	}

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'business_application' && (args[0].apptype == 'NEW' || args[0].txnmode == 'CAPTURE') }")
	public void beforeCreateNewOrCapture(def evt) {
		def app = evt.args[0];
		if( !app.lobs ) throw new Exception("Please specify lobs in application");
		if( !app.appyear ) throw new Exception("Please specify appyear in application");		

		def acct = [:];
		acct.bin = controlNoSvc.getNextNo( "B[org][yyyy][%06d]" );
		acct.businessname = app.businessname;
		acct.dtcreated = dateSvc.getServerDate(); 
		acct = acctEm.create( acct );	

		//set application properties
		app.businessacctid = acct.objid;
		def geninfo = createInfo( app );	
		def yearentry = createYearEntry( app, geninfo );
		app.geninfoid = geninfo.objid;
		app.businessyearid = yearentry.objid;
		app.dtcreated = acct.dtcreated;
		app.appdate = acct.dtcreated;
		app.bin = acct.bin;
		app.appno =  generateAppNo(app.bin, app.apptype);
	} 

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'business_application' && args[0].apptype == 'RENEW' && args[0].txnmode == 'ONLINE' }")
	public void beforeCreateRenew(def evt) {
		def app = evt.args[0];		
		if( !app.businessacctid ) throw new Exception("Please specify business in renewal application");
		if( !app.lobs ) throw new Exception("Please specify lobs in renewal application");
		def dtfiled = dateSvc.getServerDate(); 

		def acct = vwAcctEm.find([objid:app.businessacctid]).first();
		if( (acct.year + 1) != app.appyear )
			throw new Exception("Year must be an increment from last year renewed/registered");
		if( acct.renewaldate !=null && acct.renewaldate.after( dtfiled ) )
			throw new Exception("This is not yet scheduled for renewal. Please check renewaldate");	

		def yearentry = createYearEntry( app, [objid: acct.geninfoid] );
		app.appno = generateAppNo(acct.bin, app.apptype);
		app.geninfoid = acct.geninfoid;
		app.businessyearid = yearentry.objid;
		app.appdate = dtfiled;
	} 

	@After(pattern="PersistenceService.create", index=50, eval="#{args[0]._schemaname == 'business_application' && args[0].apptype.matches('NEW|RENEW') }")
	public void afterCreateNewRenew(def evt) {
		def app = evt.args[0];
		def yearid = app.businessyearid; 	

		def renewalDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(app.appyear+"-01-01");

		def businessacctid = app.businessacctid;
		acctEm.find([objid: businessacctid ] ).update( [currentyearid: yearid ]);
		businessYearEm.find( [objid: yearid ] ).update( [appid: app.objid, renewaldate: renewalDate] );
	} 

	@Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'business_application' && args[0].apptype.matches('ADDITIONAL|RETIRELOB') }")
	public void beforeCreateAdditionalOrRetire(def evt) {
		def app = evt.args[0];
		if( !app.businessacctid ) throw new Exception("Please specify businessacctid in application");
		def acct = vwAcctEm.find([objid:app.businessacctid]).first();
		app.appno = generateAppNo(acct.bin, app.apptype);
		app.geninfoid = acct.geninfoid;
		app.appyear = acct.year;
		app.businessyearid = acct.currentyearid;		
		app.appdate = dateSvc.getServerDate();
	} 

	@Before(pattern="PersistenceService.create", index=100, eval="#{args[0]._schemaname == 'business_application' && args[0].apptype =='RETIRE' }")
	public void beforeCreateRetire(def evt) {
		def app = evt.args[0];
		if( !app.businessacctid ) throw new Exception("Please specify businessacctid in application");
		def acct = vwAcctEm.find([objid:app.businessacctid]).first(1);

		app.appno = generateAppNo(acct.bin, app.apptype);
		app.geninfoid = acct.geninfoid;
		app.appyear = acct.year;
		app.businessyearid = acct.currentyearid;		
		app.appdate = dateSvc.getServerDate();
		app.retiredlobs = acct.lobs.collect{ [businesslobid: it.objid] };
		if(!app.retiredlobs) throw new Exception("There are no lines of business to retire")
	} 

	//workflow is applicable for all applications
	@After(pattern="PersistenceService.create", index=100, eval="#{ args[0]._schemaname == 'business_application' && args[0].txnmode=='ONLINE' }")
	public void fireApplicationWorkflow(def evt) {
		def entity = evt.args[0];
		def p = [:];
		p.processname = 'business_application';
		p.refid = entity.objid;
		p.startdate = dateSvc.serverDate;
		p.info = entity;
		taskSvc.start(p);
	}


}